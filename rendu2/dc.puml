@startuml
'https://plantuml.com/class-diagram

skinparam classFontStyle Bold
hide enum methods

package view
{
    class GameView implements IObserver
    {
        -started:boolean
        +GameView()
        +setUp():
        -disableButtonsFor(kingdom:Kingdom):
        -enableButtonsFor(kingdom:Kingdom):
        -updateRoundCounter():
        -playedTurn():
        -writeInstructionTitle():
        -getColorOfTile(tile: Tile):Color
        -paintSelectedDomino():
        +update(o:Observable):
        +update(kingdom:Kingdom):
        +update(wallet:Wallet):
        +update():
        -end():
    }

    class ParametersGUI
    {
        +ParametersGUI()
    }
}

package model
{
    enum Biome <<enum>>
    {
        CASTLE
        WHEAT
        FOREST
        WATER
        GRASS
        SWAMP
        MINE
        +parse()
    }

    class Castle extends Tile
    {
        +Castle()
    }

    class Domino
    {
        -id:Integer
        -horizontal:boolean
        +Domino(id:Integer, t1:Tile, t2:Tile)
        +getId():Integer
        +getTiles():Tile[*]
        +toString():String
        +flipRight()
        +flip180()
        +flipLeft()
        +switchTiles()
        +isHorizontal():boolean
    }
    class Game extends Observable
    {
        -gameConstraints:boolean[*]
        -clickedTileIndex:Integer
        -currentRound:Integer
        -numberOfRounds:Integer
        -playedTurnsInRound:Integer
        -finished:boolean
        +start()
        +nextRound():
        +getCurrentRound():Integer
        +getNumberOfRounds():Integer
        +getCurrentPlayer():Player
        +playedTurn():
        -calculateFinalScores():
        +createPlayer(name:String):
        +clearPlayer():
        +getPlayers():Players[*]
        +getWallet():Wallet
        +setClickedTileIndex(clickedTileIndex:Integer):
        +getClickedTileIndex():Integer
        +getSelectedDomino():Domino
        +setSelectedDomino(selectedDomino:Domino ):
        +isFinished():boolean
        +setConstraints(harmony:boolean:middleKingdom:boolean):
        +getGameConstraints():GameConstraint[*]

    }

    abstract class GameConstraint
    {
        -bonus:Integer
        +setNewScore(p:Player)
        +{abstract} respects(grid:Tile[*])
    }

    class Harmony extends GameConstraint
    {
        +respects(grid:Tile[*]):boolean
    }

    interface IObserver <<interface>>
    {
        +update(o:Observable)
    }

    class Kingdom extends Observable
    {
        +Kingdom(height:Integer,width:Integer)
        +getGrid():Tile[*]
        +tryDominoPlacement(lineIndex:Integer,columnIndex:Integer,
        domino:Domino,clickedTileIndex:Integer,p:Player)
        +hasValidNeighbor(t1:Tile, l:Integer, c:Integer):boolean
        +calculateScore():Integer
        +fillTerrainOfTile(terrain:Tile[*], untreated:Integer[*])
        -addNeighbor(neighbors:Integer[*], terrain:Tile[*],
        l:Integer, c:Integer, l2:Integer, c2:Integer)
        -getFirstUntreatedTile(terrains:Tile[*]):Integer[*]
        +slideGridElements(direction:Integer)
    }

    class MiddleKingdom extends GameConstraint
    {
        +respects(grid:Tile[*]):boolean
    }

    abstract class Observable <<abstract>>
        {
            +Observable()
            +notifyObservers()
            +addObserver(observer:IObserver)
        }

    class Player
    {
        -name:String
        -score:Integer
        +Player(name:String)
        +getName():String
        +setKingdom(kingdom:Kingdom)
        +getKingdom():Kingdom
        +toString():String
        +getScore():Integer
        +setScore(score:Integer)
    }

    class Tile
    {
        - crowns : Integer
        +Tile(biome:Biome, crowns:Integer)
        +toString():String
        +getBiome():Biome
        +getCrowns():Integer
        +getCrownsAsString():String
    }

    class Wallet extends Observable
    {
        -size:Integer
        +Wallet(size:Integer)
        +getSize():Integer
        +getDominos():Domino[*]
        +declareAsUsed(domino:Domino)
        +hasBeenUsedAlready(domino:Domino):boolean
        +clearUsedDomino()
    }
}

package controller
{
    class GameController
    {
        +GameController(game:Game)
        +flipLeft():
        +flipRight():
        +flip180():
        +tryDominoPlacement(finalI: Integer,finalJ: Integer):boolean
        + makeLeaderboard():
        +slideKingdom(kingdom:Kingdom,finalI:Integer):
        +setSelectedDomino(domino:Domino):
        +setClickedTileIndex(clickedTileIndex:Integer):
        +skipTurn():
        +addObserver(observable:Observable,observer:IObserver):
    }

    class ParametersController
    {
        +ParametersController(game:Game)
        +startGame()
        +addPlayer(s:String):
        +setGameConstraint(harmony:boolean,middleKingdom:boolean):
        +clearPlayers():
    }


}
package utilities
{
 class CSVReader
    {
        +CSVReader()
        +generateDominos():Domino[*]
    }
}

'Domino *--> "2" Tile : > tiles[*]
'Game *--> "12..48" Domino :  >  deck[*]
'Game *--> "2..4" Player :  >  players[*]
'Game *--> "2..4" Player : > newOrder[*]
'Game *--> "1" Board : > board
'Game *--> "1" Wallet :  >  wallet
'Game ..> IObserver : <<use>>
'Kingdom *--> Tile :  >  grid[*]
'ParametersGUI *--> "2..4" Player:  >  players[*]
'Player o--> "1"Kingdom :   kingdom
'Tile *--> "1" Biome :  >  biome
'Wallet *--> "3..4" Domino :  >  dominos[*]
'Board o--> "0..1" Domino :  > selectedDomino
'App  .> Game : <<use>>
'Game .> CSVReader : <<use>>
'Game ..> ParametersGUI : <<use>>
'Player o--> "1" Domino : > lastPlayedDomino
'Wallet *--> "0..4" Domino : > used[*]
'Kingdom ..> "1" Castle : <<use>>
'Observable o-up-> IObserver : > observers[*]
'KingdomObserver ..> Board : <<use>>
'KingdomObserver ..> Player : <<use>>
'WalletObserver ..> Wallet : <<use>>
'WalletObserver ..> Board : <<use>>

@enduml