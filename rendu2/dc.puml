@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

package model
{

    enum Biome <<enum>>
    {
        CASTLE
        WHEAT
        FOREST
        WATER
        GRASS
        SWAMP
        MINE
        +parse(s:String):Biome
    }

    class Castle extends Tile
    {
        +Castle()
    }

    class Domino
    {
        -id:Integer
        -horizontal:boolean

        +Domino(id:Integer, t1:Tile, t2:Tile)
        -switchTiles()
        +getId():Integer
        +getTiles():Tile[*]
        +toString():String
        +flipRight()
        +flip180()
        +flipLeft()
        +isHorizontal():boolean
    }

    class Game extends Observable
    {
        -gameConstraints:boolean[*]
        -clickedTileIndex:Integer
        -currentRound:Integer
        -numberOfRounds:Integer
        -playedTurnsInRound:Integer

        -nextRound()
        -calculateFinalScores()
        +start()
        +getCurrentRound():Integer
        +getNumberOfRounds():Integer
        +getCurrentPlayer():Player
        +playedTurn()
        +createPlayer(name:String)
        +clearPlayers()
        +getPlayers():Players[*]
        +getWallet():Wallet
        +setClickedTileIndex(clickedTileIndex:Integer)
        +getClickedTileIndex():Integer
        +getSelectedDomino():Domino
        +setSelectedDomino(selectedDomino:Domino)
        +setConstraints(harmony:boolean, middleKingdom:boolean)
        +getGameConstraints():GameConstraint[*]
    }

    abstract class GameConstraint
    {
        -bonus:Integer
        +setNewScore(p:Player)
        +{abstract} respects(grid:Tile[*])
    }

    class Harmony extends GameConstraint
    {
        +Harmony()
        +respects(grid:Tile[*]):boolean
    }

    interface IObserver <<interface>>
    {
        +update(o:Observable)
    }

    class Kingdom extends Observable
    {
        +Kingdom(height:Integer,width:Integer)
        -fillTerrainOfTile(terrain:Tile[*], untreated:Integer[*])
        -getFirstUntreatedTile(terrains:Tile[*]):Integer[*]
        -addNeighbor(neighbors:Integer[*], terrain:Tile[*],
        l:Integer, c:Integer, l2:Integer, c2:Integer)
        +getGrid():Tile[*]
        +tryDominoPlacement(lineIndex:Integer,columnIndex:Integer,
        domino:Domino,clickedTileIndex:Integer)
        +hasValidNeighbor(t1:Tile, l:Integer, c:Integer):boolean
        +calculateScore():Integer
        +slideGridElements(direction:Integer)
    }

    class MiddleKingdom extends GameConstraint
    {
        +MiddleKingdom()
        +respects(grid:Tile[*]):boolean
    }

    abstract class Observable <<abstract>>
    {
        +notifyObservers()
        +addObserver(observer:IObserver)
    }

    class Player
    {
        -name:String
        -score:Integer

        +Player(name:String)
        +getName():String
        +setKingdom(kingdom:Kingdom)
        +getKingdom():Kingdom
        +toString():String
        +getScore():Integer
        +setScore(score:Integer)
    }

    class Tile
    {
        -crowns:Integer

        +Tile(biome:Biome, crowns:Integer)
        +toString():String
        +getBiome():Biome
        +getCrowns():Integer
        +getCrownsAsString():String
    }

    class Wallet extends Observable
    {
        -size:Integer

        +Wallet(size:Integer)
        +getSize():Integer
        +getDominos():Domino[*]
        +declareAsUsed(domino:Domino)
        +hasBeenUsedAlready(domino:Domino):boolean
        +clearUsedDomino()
    }
}

package controller
{
    class GameController
    {
        +GameController(game:Game)
        +flipLeft()
        +flipRight()
        +flip180()
        +tryDominoPlacement(finalI:Integer, finalJ:Integer):boolean
        +makeLeaderboard()
        +slideKingdom(kingdom:Kingdom, finalI:Integer)
        +setSelectedDomino(domino:Domino)
        +setClickedTileIndex(clickedTileIndex:Integer)
        +skipTurn()
        +addObserver(observable:Observable, observer:IObserver)
    }

    class ParametersController
    {
        +ParametersController(game:Game)
        +startGame()
        +addPlayer(s:String)
        +setGameConstraint(harmony:boolean, middleKingdom:boolean)
        +clearPlayers()
    }
}

package view
{
    class GameView implements IObserver
    {
        -started:boolean

        +GameView(game:Game, controller:GameController)
        -disableButtonsFor(kingdom:Kingdom)
        -enableButtonsFor(kingdom:Kingdom)
        -playedTurn()
        -writeInstructionTitle()
        -getColorOfTile(tile:Tile):Color
        -paintSelectedDomino()
        -end()
        -update(kingdom:Kingdom)
        -update(wallet:Wallet)
        -update()
        +update(o:Observable)
        +setUp()
    }

    class ParametersGUI
    {
        -smallResolution:boolean
        -nbPlayers:Integer

        +ParametersGUI(game:Game, controller:ParametersController)
        -changeFont()
    }
}

package utilities
{
    class CSVReader
    {
        -{static}INSTANCE:CSVReader
        -CSVReader()
        +{static}getInstance():CSVReader
        +generateDominos():Domino[*]
    }
}

class App
{
    +{static}main(args:String[*])
}

'-------------------------------------
App .> Game : > <<creates>>
App ..> ParametersController : > <<creates>>
App .> ParametersGUI : > <<creates>>

'-------------------------------------

ParametersGUI .> Game : > <<use>>
ParametersGUI .up.> GameController : > <<use>>

'-------------------------------------

GameView .> Game : > <<use>>
GameView .up.> GameController : > <<use>>
GameView .> Wallet : > <<use>>
GameView .> Kingdom : > <<use>>
GameView .> Observable : > <<use>>
GameView .> Tile : > <<use>>

'-------------------------------------

CSVReader .up.> Domino : > <<creates>>
CSVReader .up.> Biome : > <<use>>
CSVReader .up.> Tile : > <<use>>
CSVReader .> CSVReader : > <<creates>>

'-------------------------------------

Wallet *-left-> "3..4 \n-dominos[*]" Domino : > contains
Wallet *-> "3..4\n-used[*]" Domino : > contains

'-------------------------------------

Tile *-> "-biome" Biome  : > represents

'-------------------------------------

Player o-down-> "1\nkingdom" Kingdom : > has

'-------------------------------------

Observable o-> "-observers[*]" IObserver : > can notify

'-------------------------------------

MiddleKingdom .right.> Tile : > <<use>>

'-------------------------------------

Kingdom *-down-> "25\n-grid[*]" Tile : > is made of
Kingdom .> Domino : > <<use>>

'-------------------------------------

Harmony .right.> Tile : > <<use>>

'-------------------------------------

GameConstraint .> Player : > <<use>>
GameConstraint .> Tile : > <<use>>

'-------------------------------------

Game *-> "deck" Domino : > uses
Game *--> "2..4\n-players" Player : > makes play
Game o-> "0..2\n-constraints" GameConstraint : > can have
Game *--> "3..4\n-oldOrder" Player : > uses
Game *--> "3..4\n-newOrder" Player : > uses
Game *-left-> "0..1\n-selectedDomino" Domino : > uses
Game *--> "0..1\n-currentPlayer" Player : > uses
Game *-> "1\n-wallet" Wallet : > uses
Game .down.> CSVReader : > <<use>>

'-------------------------------------

Domino *-right-> "2\n-tiles" Tile : > is made of

'-------------------------------------

Castle .> Biome : > <<use>>

'-------------------------------------

ParametersController *-> "1\n-game" Game : > modifies parameters of
ParametersController .> GameView : > <<creates>>

'-------------------------------------

GameController *-> "1\n-game" Game : > manages
GameController .> Kingdom : > <<use>>
GameController .> Observable : > <<use>>
GameController .> IObserver : > <<use>>

@enduml